Order --> root node!

1. Preorder Traversal (Preorder so root node comes first)
Order:
root → left → right

ex,

    2
   / \
  1   3

2 -> 1 -> 3

2. Inorder Traversal (Inorder so root node comes in the middle)
Order:
left → root → right

ex,

    2
   / \
  1   3

1 -> 2 -> 3

IMPORTANT!!! -> Inorder Traversal of nodes result in sorted form if any only if the tree is BST (skewed tree is also a sort of BST)

3. Postorder Traversal (Postorder so root node comes at last)
Order:
left -> right -> root

ex,

    2
   / \
  1   3

1 -> 3 -> 2

4. Levelorder Traversal (BFS)
Order:
Visit each level from left to right (start with root, then left -> right at each level)

ex,

    2
   / \
  1   3

2 -> 1 -> 3


Preorder, Inorder, Postorder, Levelorder (all traversal)
-> Time complexity: O(N), Space complexity: O(H) (for pre, in, postorder) or O(W) (levelorder only)
where N: number of nodes, H: tree height, W: max width (number of nodes at the widest level)


Preorder, Inorder, Postorder, and Levelorder traversal all use recursive call.
But its time complexity is O(N), N for the number of nodes, as each node called only once



  			  8
           /     \
         4         12
       /  \      /   \
     2     6   10     14
    / \   / \  / \     / \
   1  3  5  7 9 11   13  15

Preorder (root -> left -> right): 8 -> 4 -> 2 -> 1 -> 3 -> 6 -> 5 -> 7 -> 12 -> 10 -> 9 -> 11 -> 14 -> 13 -> 15
Inorder (left -> root -> right):  1 -> 2 -> 3 -> 4- > 5 -> 6 -> 7 -> 8 -> 9 -> 10 -> 11 -> 12 -> 13 -> 14 -> 15
Postorder (left -> right -> root):1 -> 3 -> 2 -> 5 -> 7 -> 6 -> 4 -> 9 -> 11 -> 10 -> 13 -> 15 -> 14 -> 12 -> 8
Levelorder (visit each level from left to right) 8 -> 4- > 12 -> 2 -> 6 -> 10 -> 14 -> 1 -> 3 -> 5 -> 7 -> 9 -> 11 -> 13 -> 15

Again, the pre, in, post refers to the location of root. left -> right is fixed.



